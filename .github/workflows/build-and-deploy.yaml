name: Build, e2e, and deploy

on:
  workflow_dispatch:
  repository_dispatch:
    types: [dependency_updated]

env:
  POSTGRES_HOST: localhost
  POSTGRES_USER: postgres
  POSTGRES_PASSWORD: password
  POSTGRES_DB: ctk
  POSTGRES_PORT: 5432
  POSTGRES_SSL: false
  DEVELOPMENT_USER: development.user.admin@example.com
  AZURE_FUNCTION_PYTHON_URL: http://localhost:8000


jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Set repository name
        run: |
          REPO_NAME=$(echo "${{ github.event.client_payload.triggered_by }}" | cut -d'/' -f2 | cut -d',' -f1)
          echo "REPO_NAME=$REPO_NAME" >> $GITHUB_ENV

      - name: Checkout GitHub Action
        uses: actions/checkout@main
        with:
          repository: childmindresearch/${{ env.REPO_NAME }}

      - name: Get SHA
        run: echo "SHA=$(git rev-parse HEAD)" >> $GITHUB_ENV

      - name: Build and push image
        uses: azure/docker-login@v2
        with:
          login-server: ${{ secrets.ACR_LOGIN_SERVER }}
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}

      - name: Build and push Docker image
        run: |
          if [ "${{ env.REPO_NAME }}" = "ctk-functions" ]; then
            docker build . \
              --build-arg AZURE_BLOB_SIGNATURES_CONNECTION_STRING="${{ secrets.AZURE_BLOB_SIGNATURES_CONNECTION_STRING }}" \
              -t ${{ secrets.ACR_LOGIN_SERVER }}/${{ env.REPO_NAME }}:latest \
              -t ${{ secrets.ACR_LOGIN_SERVER }}/${{ env.REPO_NAME }}:sha-${{ env.SHA }}
          else
            docker build . \
              -t ${{ secrets.ACR_LOGIN_SERVER }}/${{ env.REPO_NAME }}:latest \
              -t ${{ secrets.ACR_LOGIN_SERVER }}/${{ env.REPO_NAME }}:sha-${{ env.SHA }}
          fi
          docker push ${{ secrets.ACR_LOGIN_SERVER }}/${{ env.REPO_NAME }}:latest
          docker push ${{ secrets.ACR_LOGIN_SERVER }}/${{ env.REPO_NAME }}:sha-${{ env.SHA }}

  e2e:
    needs: build
    runs-on: ubuntu-latest
    services:
      api:
        image: cliniciantoolkit.azurecr.io/ctk-functions:latest
        credentials:
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}
        ports:
          - 8000:8000
        env:
          CLOAI_SERVICE_URL: http://cloai-service:8001/v1
          CLOAI_MODEL: sonnet-3.5-v2
          LANGUAGE_TOOL_URL: http://languagetool:8010/v2
          REDCAP_API_TOKEN: unused
      cloai-service:
        image: cliniciantoolkit.azurecr.io/cloai-service:latest
        credentials:
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}
        ports:
          - 8001:8001
        env:
          PORT: 8001
          CONFIG_JSON: |
            {
              "clients": {
                "sonnet-3.5-v2": { 
                  "type": "bedrock-anthropic", 
                  "model": "anthropic.claude-3-5-sonnet-20241022-v2:0", 
                  "aws_access_key": "${{ secrets.AWS_ACCESS_KEY_ID }}", 
                  "aws_secret_key": "${{ secrets.AWS_SECRET_ACCESS_KEY }}", 
                  "region": "us-west-2"
                }
              }
            }
      languagetool:
        image: erikvl87/languagetool:6.5
        ports:
          - 8010:8010
      postgres:
        image: postgres:latest
        ports:
          - 5432:5432
        env:
          POSTGRES_USER: ${{ env.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ env.POSTGRES_DB }}
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 10

    steps:
      - name: Checkout Frontend
        uses: actions/checkout@main
        with:
          repository: childmindresearch/ctk-webapp

      - name: Initialize PostgreSQL
        env:
          PGPASSWORD: ${{ env.POSTGRES_PASSWORD }}
        run: psql -h localhost -U ${POSTGRES_USER} -d ctk -f ./e2e/init.sql

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 22.4.x
          cache: npm
          cache-dependency-path: package-lock.json
      - name: Install dependencies
        run: |
          npm install --legacy-peer-deps
          npx playwright install chromium
      - name: Run tests
        run: |
          npm run test:integration

      - name: Upload test artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: video-files
          path: test-results/**/*.webm

  deploy:
    needs: e2e
    runs-on: ubuntu-latest
    steps:
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Get latest SHA tags
        run: |
          az acr login --name ${{ secrets.ACR_LOGIN_SERVER }}
          
          get_latest_sha() {
            local repo=$1
            az acr repository show-tags \
              --name ${{ secrets.ACR_LOGIN_SERVER }} \
              --repository $repo \
              --orderby time_desc \
              --query "[?contains(@, 'sha-')]|[0]"
          }
          
          CTK_FUNCTIONS_SHA=$(get_latest_sha "ctk-functions")
          CTK_WEBAPP_SHA=$(get_latest_sha "ctk-webapp")
          CLOAI_SERVICE_SHA=$(get_latest_sha "cloai-service")
          
          echo "CTK_FUNCTIONS_SHA=$CTK_FUNCTIONS_SHA" >> $GITHUB_ENV
          echo "CTK_WEBAPP_SHA=$CTK_WEBAPP_SHA" >> $GITHUB_ENV
          echo "CLOAI_SERVICE_SHA=$CLOAI_SERVICE_SHA" >> $GITHUB_ENV

      - name: Deploy CTK-Functions
        uses: azure/container-apps-deploy-action@v1
        with:
          imageToDeploy: ${{ secrets.ACR_LOGIN_SERVER }}/ctk-functions:${{ env.CTK_FUNCTIONS_SHA }}
          containerAppName: ca-ctk-functions-py
          containerAppEnvironment: cae-ctk
          resourceGroup: ClinicianToolkit
          azureCredentials: ${{ secrets.AZURE_CREDENTIALS }}
          disableTelemetry: 'true'

      - name: Deploy CTK-Webapp
        uses: azure/container-apps-deploy-action@v1
        with:
          imageToDeploy: ${{ secrets.ACR_LOGIN_SERVER }}/ctk-webapp:${{ env.CTK_WEBAPP_SHA }}
          containerAppName: ca-ctk-webapp
          containerAppEnvironment: cae-ctk
          resourceGroup: ClinicianToolkit
          azureCredentials: ${{ secrets.AZURE_CREDENTIALS }}
          disableTelemetry: 'true'

      - name: Deploy cloai-service
        uses: azure/container-apps-deploy-action@v1
        with:
          imageToDeploy: ${{ secrets.ACR_LOGIN_SERVER }}/ctk-cloai-service:${{ env.CLOAI_SERVICE_SHA }}
          containerAppName: ca-cloai-service
          containerAppEnvironment: cae-ctk
          resourceGroup: ClinicianToolkit
          azureCredentials: ${{ secrets.AZURE_CREDENTIALS }}
          disableTelemetry: 'true'






